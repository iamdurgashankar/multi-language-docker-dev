version: '3.8'

services:
  # Python Flask API
  python-api:
    build:
      context: ./python
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    volumes:
      - ./python:/app
      - /app/__pycache__
    networks:
      - app-network

  # Node.js Express API
  nodejs-api:
    build:
      context: ./nodejs
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./nodejs:/app
      - /app/node_modules
    networks:
      - app-network

  # Java Spring Boot API
  java-api:
    build:
      context: ./java
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    volumes:
      - ./java:/app
    networks:
      - app-network

  # Go Gin API
  go-api:
    build:
      context: ./golang
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      - GO_ENV=development
    volumes:
      - ./golang:/app
    networks:
      - app-network

  # .NET Core API
  dotnet-api:
    build:
      context: ./dotnet
      dockerfile: Dockerfile
    ports:
      - "7000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./dotnet:/app
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=multiapp
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=devpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - python-api
      - nodejs-api
      - java-api
      - go-api
      - dotnet-api
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge